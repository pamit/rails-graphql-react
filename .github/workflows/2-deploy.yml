name: Build and Deploy

on:
  workflow_dispatch:
  push:
    branches: [main]
  workflow_run:
    workflows: [Prerelease]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REGISTRY: public.ecr.aws/y6a1b9z5

jobs:
  build-and-push:
    name: Build & Push Rails and React Images
    runs-on: ubuntu-latest
    environment:
      name: sandbox
      url: http://my-blog-app-service:3001

    if: |
        (github.event_name != 'workflow_run') ||
        (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up QEMU (for multi-arch builds)
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # - name: AWS Credentials
      #   run: |
      #     echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
      #     echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
      #     echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          mask-aws-account-id: true
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          # aws-account-id: ${{ secrets.AWS_ACCOUNT_ID }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push Rails API Docker image (multi-arch)
        run: |
          echo "ðŸš€ Build and Push Rails API"
          docker buildx build --platform linux/amd64,linux/arm64 \
            --build-arg REACT_APP_API_URL=http://my-blog-api-service:3000/graphql \
            -t $ECR_REGISTRY/my-blog-api:latest \
            -f Dockerfile.api \
            --push .

      # - name: Build Rails API Docker image
      #   run: |
      #     echo "ðŸš€ Build and Push Rails API"
      #     docker build -f Dockerfile.api -t my-blog-api .

      # - name: Tag and push Rails API image to ECR
      #   run: |
      #     docker tag my-blog-api:latest $ECR_REGISTRY/my-blog-api:latest
      #     docker push $ECR_REGISTRY/my-blog-api:latest

      - name: Build & Push React App Docker image (multi-arch)
        run: |
          echo "ðŸš€ Build and Push React App"
          docker buildx build --platform linux/amd64,linux/arm64 \
            -t $ECR_REGISTRY/my-blog-app:latest \
            -f Dockerfile.app \
            --push .

      # - name: Build React App Docker image
      #   run: |
      #     echo "ðŸš€ Build and Push React App"
      #     docker build -f Dockerfile.app -t my-blog-app .

      # - name: Tag and push React App image to ECR
      #   run: |
      #     docker tag my-blog-app:latest $ECR_REGISTRY/my-blog-app:latest
      #     docker push $ECR_REGISTRY/my-blog-app:latest

  deploy:
    name: Deploy to AWS ECS
    runs-on: ubuntu-latest
    needs: build-and-push
    environment:
      name: sandbox
      url: http://my-blog-app-service:3001
    defaults:
      run:
        working-directory: infra

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          mask-aws-account-id: true
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          # aws-account-id: ${{ secrets.AWS_ACCOUNT_ID }}

      - name: Terraform Init
        run: |
          echo "ðŸš€ Terraform init"
          terraform init

      - name: Terraform plan
        run: |
          echo "ðŸš€ Terraform plan"
          terraform plan -out=tfplan

      # - name: Terraform apply
      #   run: |
      #     echo "ðŸš€ Terraform apply"
      #     terraform apply -auto-approve tfplan
